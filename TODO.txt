
* See to have clients and servers for HTTP/HTTPS/HTTP2/HTTP3
  (we already have such in libsnapwebsites, only it uses `snapuri`...)

* Config describing allowed messages with their parameters and values for
  such and a way to track which message was ever sent (i.e. a form of
  message coverage) so we can verify that all messages were checked
  (i.e. for debug purposes).

* A service to track changes to the list of opened/closed network connections
  (I already have code to do that, but I never spent any time on implementing
  anything in link with it. It should track the changes to the /proc/... file
  and report these through some mechanism similar to the file_change system).

* Finish the snaplogger network appender extension.

* Consider moving the cppprocess tee_pipe to eventdispatcher.

* Add support for any number of timers in a connection. I often run in
  problems with this because I need two or three different timers then
  I have to create sub-objects, which are separate connection timers by
  themselves. We can have an identifier to recognize which timer times
  out and pass that parameter to the process_timeout() function.
  Another solution would be to have a way to quickly create a timer
  without having to create a sub-class, so that way we could keep it
  separate (clean) and have a callback instead of a virtual function
  (and we have a callback thingy to manage lists of callbacks in snapdev).

