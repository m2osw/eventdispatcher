# Sample of Snap! Communicator configuration file
#
# The file is a basic list of variable name = value
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# server_name=<name>
#
# Name of this server, each server MUST have a different name to make
# sure that each can generate unique identifiers without relying on
# UUIDs or some such features.
#
# If not defined in the .conf file, the computer `hostname` is used
# (see hostname(1) or gethostname(2) manuals for more info.) In most
# cases this is enough but it can be problematic if your name starts
# with a digit or includes incompatible characters.
#
# The hostname dash (-) characters and transformed to underscores (_)
# and only the part before the first period (.) is kept. In most cases,
# the hostname will be valid, although you could end up with duplicates
# if the first part of the name (FNDQ) is the same on multiple computers.
#
# The name is considered case insensitive. Internally, we actually convert
# it to all lowercase letters. Note that on A-Z and a-z letters are
# supported. UTF-8 is not accepted.
#
# This parameter is always read from this file using the library
# server::get_server_name() function.
#
# Default: <none>
#server_name=my_server_name


# debug=on
#
# Whether you want to turn on debug mode (variable is set) of the server.
# The default is off (variable undefined). This is exactly the same as
# using the --debug command line option. This is useful as the command
# line option is difficult to deal with when working with systemd.
#
# Default: <undefined>
#debug=on


# debug_all_messages=on
#
# Debug all messages if this variable is set. This includes all snaplock
# and snaplog messages which for most are hidden even when you set your
# log level to TRACE. This is because those two daemons can generate a
# really large number of messages so it's best not to have them included
# by default (it makes things faster as it does not even have to generate
# the line of log.)
#
# Default: <undefined>
#debug_all_messages=on


# log_config=<path to log properties>
#
# This variable defines the properties that log4cplus library will read
# to handle logging of the snapcommunicator daemon.
#
# Default: /etc/snapwebsites/logger/snapcommunicator.properties
log_config=/etc/snapwebsites/logger/snapcommunicator.properties


# my_address=<IP address>
#
# The IP address of your network, most generally a private IP.
# This IP address is shared and will generally be the same as
# the one found in the listen=... parameter, but without the
# port.
#
# IMPORTANT NOTE:
# By default we set this parameter to 127.0.0.1, which is similar to
# saying "ignore the address for remote connections." This allows the
# snap environment to automatically start which in turn gives you the
# ability to tweak parameters from snapmanager.cgi. However, the local
# IP address is not correct in this parameter.
#
# Default: 127.0.0.1 -- to match the listen=... value and prevent remote connections by default
my_address=127.0.0.1


# listen=<private IP address:port>
#
# IP and port to listen on for TCP/IP connections for other snapcommunicator
# servers running on your private network (i.e. 10.0.0.0, 192.168.0.0...)
#
# IMPORTANT NOTE:
# See the IMPORTANT NOTE for the "my_address" field. We use 127.0.0.1
# so we can start snapcommunicator without you having to immediately
# edit anything. However, the local IP address will prevent remote
# snapcommunicators from connecting between each others.
#
# Default: 127.0.0.1:4040 -- to match the my_address=... and prevent remote connections
listen=127.0.0.1:4040


# local_listen=<local IP address>:<port>
#
# IP and port to listen on for local TCP/IP connections.
# The address MUST be a local IP address (such as 127.0.0.1). This is for
# security reasons because daemons that connect to that address are
# considered safe (since they run on the same computer.)
#
# Default: 127.0.0.1:4040
local_listen=127.0.0.1:4040


# signal=<IP address>:<port>
#
# IP and port to listen on for UDP/IP packets. A limited number of messages
# can be sent to snapcommunicator over this UDP port. For example, a child
# process will often send an event to that IP:port when it makes a
# modification to the data that requires a backend to process the change.
# (i.e. a PING is sent when a new image is uploaded and a script attached
# to it.)
#
# Default: 127.0.0.1:4041
signal=127.0.0.1:4041


# signal_secret=<secret-code>
#
# A secret code used to communicate with the snapcommunicator UDP port.
#
# UDP has no good control in regard to how emitted the source message so
# we use a secret code allowing your network to safely use UDP between
# computers. The code is expected to be small. It can include any
# characters although it doesn't need to be that complex, just not a
# dictionary word or "password1", please.
#
# When you define a secret code, a UDP message we receive without this
# secret code is simpley discarded.
#
# When this parameter is set to empty, snapcommunicator accepts all UDP
# messages on the signal channel. This is a save setup only if the
# signal IP address is 127.x.x.x.
#
# Default: <empty>
signal_secret=


# max_pending_connections=<integer between 5 and 1000>
#
# Number of connections that we can receive simultaneously before the OS
# rejects them; whatever is specified the value is clamped between 5 and
# 1000 inclusive. To get the default, comment our the variable.
#
# Default: 50
#max_pending_connections=<default>


# ssl_certificate=<full path to PEM file>
#
# If a certificate (and private key) is defined, then the snapcommunicator
# remote connections will be done over SSL. Note that SSL really means
# it will be encrypted. At time of writing, we only allow TLS v1.2
# connections and no SSL v2 or v3.
#
# Default: /etc/snapwebsites/ssl/snapcommunicator.crt
ssl_certificate=/etc/snapwebsites/ssl/snapcommunicator.crt


# ssl_private_key=<full path to PEM file>
#
# If a private key (and certificate) is defined, then the snapcommunicator
# remote connections will be done over SSL. Note that SSL really means
# it will be encrypted. At time of writing, we only allow TLS v1.2
# connections and no SSL v2 or v3.
#
# Default: /etc/snapwebsites/ssl/snapcommunicator.key
ssl_private_key=/etc/snapwebsites/ssl/snapcommunicator.key


# neighbors=IP:port,IP:port,...
#
# The IP and port of snapcommunicators running on other computers.
# Multiple IP:port definitions are separated by commas.
# If not specified, this snapcommunicator will not try to connect to a
# remote snapcommunicator.
#
# There is no default address, the port is 4040 by default if not specified
# Example: 10.0.0.5:4040,10.0.0.13:4040
#neighbors=10.0.0.5


# cache_path=<path to permanent cache>
#
# This variable is expected to be set to a full directory path that
# represents a permanent (durable) cache for snapcommunicator.
#
# This cache is not currently used (we used it for the complete list of
# neighbors not realizing that would destroy said list and prevent
# inter-computer connections on servers that don't have a list of neighbors
# defined in their configuration file, which is how it goes with
# snapmanager.cgi at the moment.)
#
# This path should be different from the library path (/var/lib/snapwebsites)
# as the data saved here may safely be deleted and the server will recover
# the data in time.
#
# Default: /var/cache/snapwebsites
cache_path=/var/cache/snapwebsites


# services=<path to services directory>
#
# The path to a directory that holds .service files representing all
# the Snap services installed on this machine.
#
# Default: /usr/share/snapwebsites/services
services=/usr/share/snapwebsites/services


# vim: wrap
